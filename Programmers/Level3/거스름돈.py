def solution(n, money):
    dp = [0] * (n+1)
    dp[0] = 1
    
    for cur_m_type in money:
        for i in range(cur_m_type, n+1):
            tmp = i - cur_m_type
            dp[i] += dp[tmp]

    return dp[-1]

print(solution(5, [1, 2, 5]))

'''
<문제>
예를 들어서 손님께 5원을 거슬러 줘야 하고 1원, 2원, 5원이 있다면 다음과 같이 4가지 방법으로 5원을 거슬러 줄 수 있습니다.

1원을 5개 사용해서 거슬러 준다.
1원을 3개 사용하고, 2원을 1개 사용해서 거슬러 준다.
1원을 1개 사용하고, 2원을 2개 사용해서 거슬러 준다.
5원을 1개 사용해서 거슬러 준다.
거슬러 줘야 하는 금액 n과 Finn이 현재 보유하고 있는 돈의 종류 money가 매개변수로 주어질 때, Finn이 n 원을 거슬러 줄 방법의 수를 return 하도록 solution 함수를 완성해 주세요.
'''

'''
<풀이>

DP를 이용한 풀이
1. 화폐 종류별로 종류a ~ n원을 만들 때 사용되는 화폐의 종류들을 카운팅한다.
2. 예를들어, 1원을 기준으로 하면, 1원부터 n원까지의 값을 만들 수 있는 방법을 더한다.
1원을 기준으로 한다면,
1원 -> 1*1 + 0원
2원 -> 1*2 + 0원
3원 -> 1*3 + 0원
4원 -> 1*4 + 0원
5원 -> 1*5 + 0원

2원을 기준으로 한다면,
1원은 만들 수 없으므로 스킵
2원 -> 2*1 + 0원
3원 -> 2*1 + 1원
4원 -> 2*1 + 2원
5원 -> 2*1 + 3원

5원을 기준으로 한다면,
1, 2, 3, 4원은 만들 수 없으므로 스킵
5원 -> 5*1 + 0원

각 화폐의 종류마다 다음과 같은 점화식을 만들 수 있다.
i <- range(화폐 종류, n+1)

dp[i] = dp[i] + dp[남은 금액]
=> dp[i] += dp[남은 금액]
'''